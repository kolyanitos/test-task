<?php

namespace App\Repository;

use App\Entity\Task;
use App\Entity\User;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends EntityRepository
{
    public function getTable($info) {
        $qb = $this
            ->createQueryBuilder('t');

        if (isset($info['sort'], $info['order'])) {
            $qb = $qb->orderBy("t.{$info['sort']}", $info['order']);
        }
        else {
            $qb = $qb->orderBy('t.id', 'desc');
        }

        return $qb
            ->getQuery()
            ->getResult();
    }

    /**
     * @param array $taskData
     * @param UploadedFile $image
     * @param bool $flush
     *
     * @return Task
     */
    public function add($taskData, $image = null, $flush = true) {
        $entity = new Task();

        if (isset($taskData['user']) and $taskData['user'] instanceof User) {
            $entity->setUser($taskData['user']);
        }

        $entity->setEmail($taskData['email']);
        $entity->setUsername($taskData['username']);
        $entity->setDescription($taskData['description']);

        if (!empty($image)) {
            $ext = ['jpg', 'jpeg', 'png', 'gif'];
            $thisExt = strtolower($image->guessExtension());

            if (in_array($thisExt, $ext)) {
                if ($thisExt === 'jpg') {
                    $thisExt = 'jpeg';
                }

                $name = uniqid('task_') . '.' . $thisExt;
                $image->move(APP_DIR . '/../web/images/tasks', $name);

                // resize to 320x240
                $path = APP_DIR . '/../web/images/tasks/' . $name;
                $imageResource = call_user_func('imagecreatefrom' . $thisExt, $path);
                $imageResource = imagescale($imageResource, 320, 240);
                if ($imageResource) {
                    call_user_func('image' . $thisExt, $imageResource, $path);
                }

                $entity->setImage($name);
            }
        }

        $this->_em->persist($entity);

        if ($flush) {
            $this->_em->flush();
        }

        return $entity;
    }

    /**
     * @param array $taskData
     * @param Task $entity
     *
     * @return Task
     */
    public function edit($taskData, $entity) {
        $entity->setIsDone(isset($taskData['is_done']));
        $entity->setDescription($taskData['description']);

        $this->_em->flush();

        return $entity;
    }
}
